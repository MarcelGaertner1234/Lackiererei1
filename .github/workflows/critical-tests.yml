name: Critical Pipeline E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'firebase-config.template.js'
      - 'tests/**'
      - '.github/workflows/critical-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'firebase-config.template.js'
      - 'tests/**'
  workflow_dispatch: # Manual trigger

# Permissions für GITHUB_TOKEN
permissions:
  contents: read
  issues: write  # Für automatische Issue-Erstellung bei Failure
  checks: write  # Für Test-Status Reports

jobs:
  test-critical-pipelines:
    name: E2E Tests - Critical Pipelines
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g firebase-tools

      - name: Setup Java for Firebase Emulators
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start Firebase Emulators
        run: |
          echo "🔥 Starting Firebase Emulators..."
          firebase emulators:start --only firestore,storage --project demo-test > firebase-emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "Emulator PID: $EMULATOR_PID"

          echo "⏳ Waiting for emulators to start..."
          sleep 15

          echo "🔍 Checking Firestore emulator..."
          for i in {1..10}; do
            if curl -f http://localhost:8080 2>/dev/null; then
              echo "✅ Firestore emulator is ready!"
              break
            fi
            echo "Attempt $i/10: Firestore not ready yet..."
            sleep 2
          done

          echo "🔍 Checking Storage emulator..."
          if curl -f http://localhost:9199 2>/dev/null; then
            echo "✅ Storage emulator is ready!"
          else
            echo "⚠️ Storage emulator might not be ready"
          fi

      - name: Configure Firebase for Tests
        run: |
          echo "📋 Firebase Emulators Status:"
          echo "  Firestore: http://localhost:8080"
          echo "  Storage: http://localhost:9199"
          echo ""
          echo "📂 Test directories:"
          ls -la tests/ | head -20
          echo ""
          echo "📦 Installed packages:"
          npm list @playwright/test playwright 2>/dev/null || echo "Packages check failed"

      - name: Debug - Show Environment
        run: |
          echo "📍 RUN #18 DEBUG: Working Directory and File Locations"
          echo "  PWD: $(pwd)"
          echo "  HOME: $HOME"
          echo "  GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo ""
          echo "📁 Root directory contents:"
          ls -lh | grep firebase
          echo ""
          echo "🔍 Checking if firebase-config files exist:"
          [ -f "firebase-config.template.js" ] && echo "  ✅ firebase-config.template.js exists" || echo "  ❌ firebase-config.template.js NOT FOUND"
          [ -f "firebase-config.js" ] && echo "  ✅ firebase-config.js exists (old version)" || echo "  ⚠️ firebase-config.js does not exist"

      - name: Setup Firebase Config for CI
        run: |
          echo "🔧 RUN #20: Setting up Firebase Config for CI/CD..."
          echo "  Source: firebase-config.template.js"
          echo "  Target: firebase-config.js"
          echo "  Working Directory: $(pwd)"

          if [ -f "firebase-config.template.js" ]; then
            echo "✅ Template file found"

            # Show template file info
            echo "📋 Template file details:"
            ls -lh firebase-config.template.js
            echo ""

            # Copy with verbose output
            echo "📝 Copying template..."
            cp -v firebase-config.template.js firebase-config.js

            # RUN #20 FIX: Add cache-bust timestamp to force browser reload
            echo "" >> firebase-config.js
            echo "// CACHE-BUST RUN #20: $(date '+%Y-%m-%d %H:%M:%S') - Unix: $(date +%s)" >> firebase-config.js
            echo "// This timestamp forces the browser to reload this file instead of using cached version" >> firebase-config.js

            echo "✅ Copy completed with cache-bust timestamp"
            ls -lh firebase-config.js
            echo ""
            echo "📝 Last 5 lines of firebase-config.js (should show cache-bust):"
            tail -5 firebase-config.js
          else
            echo "❌ ERROR: firebase-config.template.js not found!"
            echo "📁 Current directory: $(pwd)"
            echo "📁 Files in directory:"
            ls -la
            exit 1
          fi

      - name: Verify Firebase Config After Copy
        run: |
          echo "🔍 RUN #20: Verifying Firebase Config..."
          echo "  File: firebase-config.js"
          echo ""

          # Check file exists
          if [ ! -f "firebase-config.js" ]; then
            echo "❌ ERROR: firebase-config.js does not exist after copy!"
            exit 1
          fi

          # Show first 50 lines
          echo "📄 First 50 lines of firebase-config.js:"
          head -50 firebase-config.js
          echo ""

          # Check for critical function
          echo "🔍 Checking for registriereKundenbesuch function..."
          if grep -q "registriereKundenbesuch" firebase-config.js; then
            echo "✅ SUCCESS: registriereKundenbesuch FOUND in firebase-config.js"
            echo ""
            echo "📍 Function location:"
            grep -n "registriereKundenbesuch" firebase-config.js | head -3
          else
            echo "❌ CRITICAL ERROR: registriereKundenbesuch NOT FOUND in firebase-config.js!"
            echo "❌ This explains why tests are failing!"
            echo ""
            echo "📄 File content:"
            cat firebase-config.js
            exit 1
          fi

          # Check for Arrow Functions (Run #17 fix)
          echo ""
          echo "🔍 Checking for Arrow Function syntax..."
          if grep -q "registriereKundenbesuch: async (kundeData) =>" firebase-config.js; then
            echo "✅ Arrow Function syntax confirmed (Run #17 fix present)"
          else
            echo "⚠️ WARNING: Arrow Function syntax not found - using old function syntax"
            grep "registriereKundenbesuch" firebase-config.js | head -1
          fi

      - name: Run Smoke Tests
        run: npx playwright test tests/00-smoke-test.spec.js --project=${{ matrix.browser }}
        continue-on-error: true

      - name: Run Critical Transaction Failure Tests
        run: npx playwright test tests/05-transaction-failure.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Run Critical CASCADE DELETE Tests
        run: npx playwright test tests/06-cascade-delete-race.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Post-Test Verification
        if: always()
        run: |
          echo "🔍 RUN #18: Post-Test Verification..."
          echo "  Checking if firebase-config.js was modified during test run..."
          echo ""

          # Check file still exists
          if [ -f "firebase-config.js" ]; then
            echo "✅ firebase-config.js still exists"
            ls -lh firebase-config.js
            echo ""

            # Check function still present
            if grep -q "registriereKundenbesuch" firebase-config.js; then
              echo "✅ registriereKundenbesuch still present after tests"
            else
              echo "❌ WARNING: registriereKundenbesuch disappeared after tests!"
              echo "This could indicate file was overwritten during test run"
            fi
          else
            echo "❌ ERROR: firebase-config.js was deleted during test run!"
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('playwright-report/**') != ''
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Test Artifacts (Screenshots/Videos)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results/**') != ''
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7
          if-no-files-found: warn

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f "firebase.*emulators" || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: always()

    steps:
      - name: Download Test Reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true
          path: all-reports/

      - name: Generate Summary
        run: |
          echo "## Critical Pipeline Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smoke Tests (Basic functionality)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Transaction Failure Tests (Orphaned Photos Prevention)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 CASCADE DELETE Tests (AFTER-DELETE CHECK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimistic Locking**: Prevents duplicate vehicles" >> $GITHUB_STEP_SUMMARY
          echo "- **Orphaned Photos Prevention**: Fotos AFTER transaction" >> $GITHUB_STEP_SUMMARY
          echo "- **AFTER-DELETE CHECK**: Cleans up race condition photos" >> $GITHUB_STEP_SUMMARY
          echo "- **CASCADE DELETE**: Removes fotos subcollection" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-Check Filter**: Prevents stornierte anfragen in Kanban" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, check the uploaded artifacts." >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: failure()

    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        continue-on-error: true  # Verhindert dass Workflow fehlschlägt wenn Issue-Creation fehlschlägt
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔴 Critical Pipeline Tests Failed',
                body: `
                  ## Critical E2E Tests haben fehlgeschlagen

                  **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                  **Branch:** \`${{ github.ref_name }}\`
                  **Commit:** \`${{ github.sha }}\`

                  ### Betroffene Test-Suites:
                  - Transaction Failure Tests (Orphaned Photos Prevention)
                  - CASCADE DELETE Tests (AFTER-DELETE CHECK)

                  ### Nächste Schritte:
                  1. Prüfe Test-Report in Workflow Artifacts
                  2. Prüfe Screenshots/Videos der fehlgeschlagenen Tests
                  3. Überprüfe ob Firebase Emulators korrekt gestartet wurden
                  4. Validiere dass Pipeline-Fixes korrekt implementiert sind

                  **Automatisch erstellt von GitHub Actions**
                `,
                labels: ['bug', 'tests', 'critical']
              });
              console.log('✅ Issue erfolgreich erstellt');
            } catch (error) {
              console.log('⚠️ Issue-Erstellung fehlgeschlagen:', error.message);
              console.log('Tests sind fehlgeschlagen, aber Issue konnte nicht erstellt werden.');
            }
