name: Critical Pipeline E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'tests/**'
      - '.github/workflows/critical-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'tests/**'
  workflow_dispatch: # Manual trigger

jobs:
  test-critical-pipelines:
    name: E2E Tests - Critical Pipelines
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g firebase-tools

      - name: Setup Java for Firebase Emulators
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,storage --project demo-test &
          echo "Waiting for emulators to start..."
          sleep 10
          curl -f http://localhost:8080 || echo "Firestore emulator not ready yet"
          sleep 5

      - name: Configure Firebase for Tests
        run: |
          echo "Firebase Emulators running on:"
          echo "  Firestore: http://localhost:8080"
          echo "  Storage: http://localhost:9199"

      - name: Run Smoke Tests
        run: npx playwright test tests/00-smoke-test.spec.js --project=${{ matrix.browser }}
        continue-on-error: true

      - name: Run Critical Transaction Failure Tests
        run: npx playwright test tests/05-transaction-failure.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Run Critical CASCADE DELETE Tests
        run: npx playwright test tests/06-cascade-delete-race.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Artifacts (Screenshots/Videos)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f "firebase.*emulators" || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: always()

    steps:
      - name: Download Test Reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true
          path: all-reports/

      - name: Generate Summary
        run: |
          echo "## Critical Pipeline Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Smoke Tests (Basic functionality)" >> $GITHUB_STEP_SUMMARY
          echo "- üî¥ Transaction Failure Tests (Orphaned Photos Prevention)" >> $GITHUB_STEP_SUMMARY
          echo "- üî¥ CASCADE DELETE Tests (AFTER-DELETE CHECK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimistic Locking**: Prevents duplicate vehicles" >> $GITHUB_STEP_SUMMARY
          echo "- **Orphaned Photos Prevention**: Fotos AFTER transaction" >> $GITHUB_STEP_SUMMARY
          echo "- **AFTER-DELETE CHECK**: Cleans up race condition photos" >> $GITHUB_STEP_SUMMARY
          echo "- **CASCADE DELETE**: Removes fotos subcollection" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-Check Filter**: Prevents stornierte anfragen in Kanban" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, check the uploaded artifacts." >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: failure()

    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üî¥ Critical Pipeline Tests Failed',
              body: `
                ## Critical E2E Tests haben fehlgeschlagen

                **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                **Branch:** \`${{ github.ref_name }}\`
                **Commit:** \`${{ github.sha }}\`

                ### Betroffene Test-Suites:
                - Transaction Failure Tests (Orphaned Photos Prevention)
                - CASCADE DELETE Tests (AFTER-DELETE CHECK)

                ### N√§chste Schritte:
                1. Pr√ºfe Test-Report in Workflow Artifacts
                2. Pr√ºfe Screenshots/Videos der fehlgeschlagenen Tests
                3. √úberpr√ºfe ob Firebase Emulators korrekt gestartet wurden
                4. Validiere dass Pipeline-Fixes korrekt implementiert sind

                **Automatisch erstellt von GitHub Actions**
              `,
              labels: ['bug', 'tests', 'critical']
            })
