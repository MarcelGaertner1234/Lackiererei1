name: Critical Pipeline E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'tests/**'
      - '.github/workflows/critical-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'partner-app/**'
      - 'firebase-config.js'
      - 'tests/**'
  workflow_dispatch: # Manual trigger

# Permissions f√ºr GITHUB_TOKEN
permissions:
  contents: read
  issues: write  # F√ºr automatische Issue-Erstellung bei Failure
  checks: write  # F√ºr Test-Status Reports

jobs:
  test-critical-pipelines:
    name: E2E Tests - Critical Pipelines
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g firebase-tools

      - name: Setup Java for Firebase Emulators
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start Firebase Emulators
        run: |
          echo "üî• Starting Firebase Emulators..."
          firebase emulators:start --only firestore,storage --project demo-test > firebase-emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "Emulator PID: $EMULATOR_PID"

          echo "‚è≥ Waiting for emulators to start..."
          sleep 15

          echo "üîç Checking Firestore emulator..."
          for i in {1..10}; do
            if curl -f http://localhost:8080 2>/dev/null; then
              echo "‚úÖ Firestore emulator is ready!"
              break
            fi
            echo "Attempt $i/10: Firestore not ready yet..."
            sleep 2
          done

          echo "üîç Checking Storage emulator..."
          if curl -f http://localhost:9199 2>/dev/null; then
            echo "‚úÖ Storage emulator is ready!"
          else
            echo "‚ö†Ô∏è Storage emulator might not be ready"
          fi

      - name: Configure Firebase for Tests
        run: |
          echo "üìã Firebase Emulators Status:"
          echo "  Firestore: http://localhost:8080"
          echo "  Storage: http://localhost:9199"
          echo ""
          echo "üìÇ Test directories:"
          ls -la tests/ | head -20
          echo ""
          echo "üì¶ Installed packages:"
          npm list @playwright/test playwright 2>/dev/null || echo "Packages check failed"

      - name: Setup Firebase Config for CI
        run: |
          echo "üîß Setting up Firebase Config for CI/CD..."
          echo "  Source: firebase-config.template.js"
          echo "  Target: firebase-config.js"

          if [ -f "firebase-config.template.js" ]; then
            cp firebase-config.template.js firebase-config.js
            echo "‚úÖ firebase-config.js created from template"
            ls -lh firebase-config.js
          else
            echo "‚ùå ERROR: firebase-config.template.js not found!"
            exit 1
          fi

          echo ""
          echo "üîç Verifying Firebase Config..."
          head -10 firebase-config.js

      - name: Run Smoke Tests
        run: npx playwright test tests/00-smoke-test.spec.js --project=${{ matrix.browser }}
        continue-on-error: true

      - name: Run Critical Transaction Failure Tests
        run: npx playwright test tests/05-transaction-failure.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Run Critical CASCADE DELETE Tests
        run: npx playwright test tests/06-cascade-delete-race.spec.js --project=${{ matrix.browser }}
        env:
          FIREBASE_EMULATOR: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('playwright-report/**') != ''
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Test Artifacts (Screenshots/Videos)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results/**') != ''
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7
          if-no-files-found: warn

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f "firebase.*emulators" || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: always()

    steps:
      - name: Download Test Reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true
          path: all-reports/

      - name: Generate Summary
        run: |
          echo "## Critical Pipeline Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Smoke Tests (Basic functionality)" >> $GITHUB_STEP_SUMMARY
          echo "- üî¥ Transaction Failure Tests (Orphaned Photos Prevention)" >> $GITHUB_STEP_SUMMARY
          echo "- üî¥ CASCADE DELETE Tests (AFTER-DELETE CHECK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimistic Locking**: Prevents duplicate vehicles" >> $GITHUB_STEP_SUMMARY
          echo "- **Orphaned Photos Prevention**: Fotos AFTER transaction" >> $GITHUB_STEP_SUMMARY
          echo "- **AFTER-DELETE CHECK**: Cleans up race condition photos" >> $GITHUB_STEP_SUMMARY
          echo "- **CASCADE DELETE**: Removes fotos subcollection" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-Check Filter**: Prevents stornierte anfragen in Kanban" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, check the uploaded artifacts." >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [test-critical-pipelines]
    if: failure()

    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        continue-on-error: true  # Verhindert dass Workflow fehlschl√§gt wenn Issue-Creation fehlschl√§gt
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üî¥ Critical Pipeline Tests Failed',
                body: `
                  ## Critical E2E Tests haben fehlgeschlagen

                  **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                  **Branch:** \`${{ github.ref_name }}\`
                  **Commit:** \`${{ github.sha }}\`

                  ### Betroffene Test-Suites:
                  - Transaction Failure Tests (Orphaned Photos Prevention)
                  - CASCADE DELETE Tests (AFTER-DELETE CHECK)

                  ### N√§chste Schritte:
                  1. Pr√ºfe Test-Report in Workflow Artifacts
                  2. Pr√ºfe Screenshots/Videos der fehlgeschlagenen Tests
                  3. √úberpr√ºfe ob Firebase Emulators korrekt gestartet wurden
                  4. Validiere dass Pipeline-Fixes korrekt implementiert sind

                  **Automatisch erstellt von GitHub Actions**
                `,
                labels: ['bug', 'tests', 'critical']
              });
              console.log('‚úÖ Issue erfolgreich erstellt');
            } catch (error) {
              console.log('‚ö†Ô∏è Issue-Erstellung fehlgeschlagen:', error.message);
              console.log('Tests sind fehlgeschlagen, aber Issue konnte nicht erstellt werden.');
            }
