{
  "name": "Fahrzeugannahme - Firebase API Tests",
  "nodes": [
    {
      "parameters": {},
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "id": "manual-trigger"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/annahme.html",
        "options": {
          "timeout": 15000
        }
      },
      "name": "Load Annahme Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 300],
      "id": "load-annahme"
    },
    {
      "parameters": {
        "jsCode": "// Parse HTML to check if Firebase is properly configured\nconst html = $input.first().json.body;\n\n// Check 1: Firebase SDK script tags present\nconst hasFirebaseApp = html.includes('firebase-app');\nconst hasFirestore = html.includes('firebase-firestore');\nconst hasStorage = html.includes('firebase-storage');\n\n// Check 2: firebase-config.js loaded\nconst hasFirebaseConfig = html.includes('firebase-config.js');\n\n// Check 3: Critical DOM elements present\nconst hasKennzeichenInput = html.includes('id=\"kennzeichen\"');\nconst hasKundennameInput = html.includes('id=\"kundenname\"');\nconst hasSaveButton = html.includes('Speichern');\nconst hasPhotoInput = html.includes('photoInput');\nconst hasSignaturePad = html.includes('signaturePad');\n\n// Check 4: Error handler loaded\nconst hasErrorHandler = html.includes('error-handler.js');\n\n// Check 5: PDF generator loaded\nconst hasPDFGenerator = html.includes('pdf-generator.js');\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Firebase Configuration Check',\n  \n  // Firebase SDK Checks\n  firebaseSDK: {\n    firebaseApp: hasFirebaseApp ? '✅ Loaded' : '❌ Missing',\n    firestore: hasFirestore ? '✅ Loaded' : '❌ Missing',\n    storage: hasStorage ? '✅ Loaded' : '❌ Missing',\n    config: hasFirebaseConfig ? '✅ Loaded' : '❌ Missing'\n  },\n  \n  // DOM Elements Check\n  domElements: {\n    kennzeichenInput: hasKennzeichenInput ? '✅ Present' : '❌ Missing',\n    kundennameInput: hasKundennameInput ? '✅ Present' : '❌ Missing',\n    saveButton: hasSaveButton ? '✅ Present' : '❌ Missing',\n    photoInput: hasPhotoInput ? '✅ Present' : '❌ Missing',\n    signaturePad: hasSignaturePad ? '✅ Present' : '❌ Missing'\n  },\n  \n  // Utility Scripts\n  utilityScripts: {\n    errorHandler: hasErrorHandler ? '✅ Loaded' : '❌ Missing',\n    pdfGenerator: hasPDFGenerator ? '✅ Loaded' : '❌ Missing'\n  },\n  \n  // Overall Status\n  allChecks: [\n    hasFirebaseApp, hasFirestore, hasStorage, hasFirebaseConfig,\n    hasKennzeichenInput, hasKundennameInput, hasSaveButton,\n    hasPhotoInput, hasSignaturePad, hasErrorHandler, hasPDFGenerator\n  ],\n  \n  passed: null // Will be calculated below\n};\n\n// Calculate pass/fail\nconst totalChecks = result.allChecks.length;\nconst passedChecks = result.allChecks.filter(c => c === true).length;\nresult.passed = passedChecks === totalChecks;\nresult.passRate = `${passedChecks}/${totalChecks} (${Math.round((passedChecks/totalChecks)*100)}%)`;\nresult.status = result.passed ? '✅ ALL CHECKS PASSED' : '❌ SOME CHECKS FAILED';\n\nreturn [{ json: result }];"
      },
      "name": "Check Firebase Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300],
      "id": "check-firebase-config"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/liste.html",
        "options": {
          "timeout": 15000
        }
      },
      "name": "Load Liste Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "id": "load-liste"
    },
    {
      "parameters": {
        "jsCode": "// Parse HTML to check Liste page functionality\nconst html = $input.first().json.body;\n\n// Check 1: Realtime listener setup\nconst hasRealtimeListener = html.includes('onSnapshot') || html.includes('realtime');\n\n// Check 2: Filter buttons present\nconst hasFilterButtons = html.includes('filter-btn') || html.includes('filterButton');\n\n// Check 3: Table/List container\nconst hasVehicleList = html.includes('fahrzeugListe') || html.includes('vehicle-list');\n\n// Check 4: Search functionality\nconst hasSearchInput = html.includes('search') || html.includes('suche');\n\n// Check 5: Pagination\nconst hasPagination = html.includes('pagination') || html.includes('page');\n\n// Check 6: Status badges\nconst hasStatusBadges = html.includes('badge') || html.includes('status');\n\n// Check 7: Export functionality\nconst hasExportButton = html.includes('export') || html.includes('Excel');\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Liste Page Functionality Check',\n  \n  features: {\n    realtimeListener: hasRealtimeListener ? '✅ Present' : '⚠️ Not detected',\n    filterButtons: hasFilterButtons ? '✅ Present' : '❌ Missing',\n    vehicleList: hasVehicleList ? '✅ Present' : '❌ Missing',\n    searchInput: hasSearchInput ? '✅ Present' : '⚠️ Not detected',\n    pagination: hasPagination ? '✅ Present' : '⚠️ Not detected',\n    statusBadges: hasStatusBadges ? '✅ Present' : '⚠️ Not detected',\n    exportButton: hasExportButton ? '✅ Present' : '⚠️ Not detected'\n  },\n  \n  criticalChecks: [\n    hasFilterButtons,\n    hasVehicleList\n  ],\n  \n  passed: null\n};\n\n// Only critical checks must pass\nresult.passed = result.criticalChecks.every(c => c === true);\nresult.status = result.passed ? '✅ CRITICAL CHECKS PASSED' : '❌ CRITICAL CHECKS FAILED';\n\nreturn [{ json: result }];"
      },
      "name": "Check Liste Features",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300],
      "id": "check-liste-features"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/kanban.html",
        "options": {
          "timeout": 15000
        }
      },
      "name": "Load Kanban Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1250, 300],
      "id": "load-kanban"
    },
    {
      "parameters": {
        "jsCode": "// Parse HTML to check Kanban functionality\nconst html = $input.first().json.body;\n\n// Check 1: Kanban columns present\nconst hasAngenommenColumn = html.includes('angenommen') || html.includes('Angenommen');\nconst hasInArbeitColumn = html.includes('in-arbeit') || html.includes('In Arbeit');\nconst hasFertigColumn = html.includes('fertig') || html.includes('Fertig');\nconst hasAusgeliefertColumn = html.includes('ausgeliefert') || html.includes('Ausgeliefert');\n\n// Check 2: Drag & Drop library\nconst hasDragDropLibrary = html.includes('draggable') || html.includes('sortable');\n\n// Check 3: Card template\nconst hasCardTemplate = html.includes('card') || html.includes('fahrzeug-card');\n\n// Check 4: Realtime updates\nconst hasRealtimeUpdates = html.includes('onSnapshot') || html.includes('realtime');\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Kanban Page Functionality Check',\n  \n  kanbanColumns: {\n    angenommen: hasAngenommenColumn ? '✅ Present' : '❌ Missing',\n    inArbeit: hasInArbeitColumn ? '✅ Present' : '❌ Missing',\n    fertig: hasFertigColumn ? '✅ Present' : '❌ Missing',\n    ausgeliefert: hasAusgeliefertColumn ? '✅ Present' : '❌ Missing'\n  },\n  \n  features: {\n    dragDropLibrary: hasDragDropLibrary ? '✅ Present' : '⚠️ Not detected',\n    cardTemplate: hasCardTemplate ? '✅ Present' : '❌ Missing',\n    realtimeUpdates: hasRealtimeUpdates ? '✅ Present' : '⚠️ Not detected'\n  },\n  \n  criticalChecks: [\n    hasAngenommenColumn,\n    hasInArbeitColumn,\n    hasFertigColumn,\n    hasAusgeliefertColumn,\n    hasCardTemplate\n  ],\n  \n  passed: null\n};\n\nresult.passed = result.criticalChecks.every(c => c === true);\nresult.status = result.passed ? '✅ ALL COLUMNS PRESENT' : '❌ MISSING COLUMNS';\n\nreturn [{ json: result }];"
      },
      "name": "Check Kanban Columns",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 300],
      "id": "check-kanban-columns"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/partner-app/index.html",
        "options": {
          "timeout": 15000
        }
      },
      "name": "Load Partner Portal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1650, 300],
      "id": "load-partner"
    },
    {
      "parameters": {
        "jsCode": "// Parse HTML to check Partner Portal functionality\nconst html = $input.first().json.body;\n\n// Check 1: Anfrage form\nconst hasAnfrageForm = html.includes('anfrage') || html.includes('Anfrage');\nconst hasKennzeichenField = html.includes('kennzeichen');\nconst hasSchadensbeschreibung = html.includes('schadensbeschreibung') || html.includes('beschreibung');\n\n// Check 2: KVA section\nconst hasKVASection = html.includes('kva') || html.includes('KVA');\nconst hasKVAList = html.includes('kva-liste') || html.includes('kva-list');\n\n// Check 3: Status tracking\nconst hasStatusTracking = html.includes('status') && html.includes('tracking');\n\n// Check 4: Photo upload\nconst hasPhotoUpload = html.includes('photo') || html.includes('foto');\n\n// Check 5: Firebase integration\nconst hasFirebaseIntegration = html.includes('firebase-config');\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Partner Portal Functionality Check',\n  \n  anfrageFeatures: {\n    anfrageForm: hasAnfrageForm ? '✅ Present' : '❌ Missing',\n    kennzeichenField: hasKennzeichenField ? '✅ Present' : '❌ Missing',\n    schadensbeschreibung: hasSchadensbeschreibung ? '✅ Present' : '❌ Missing',\n    photoUpload: hasPhotoUpload ? '✅ Present' : '⚠️ Not detected'\n  },\n  \n  kvaFeatures: {\n    kvaSection: hasKVASection ? '✅ Present' : '❌ Missing',\n    kvaList: hasKVAList ? '✅ Present' : '⚠️ Not detected',\n    statusTracking: hasStatusTracking ? '✅ Present' : '⚠️ Not detected'\n  },\n  \n  integration: {\n    firebaseConfig: hasFirebaseIntegration ? '✅ Loaded' : '❌ Missing'\n  },\n  \n  criticalChecks: [\n    hasAnfrageForm,\n    hasKennzeichenField,\n    hasKVASection,\n    hasFirebaseIntegration\n  ],\n  \n  passed: null\n};\n\nresult.passed = result.criticalChecks.every(c => c === true);\nresult.status = result.passed ? '✅ PARTNER PORTAL OK' : '❌ CRITICAL FEATURES MISSING';\n\nreturn [{ json: result }];"
      },
      "name": "Check Partner Features",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300],
      "id": "check-partner-features"
    },
    {
      "parameters": {
        "jsCode": "// Combine all test results\nconst allInputs = $input.all();\n\n// Extract test results\nconst firebaseConfigResult = allInputs.find(i => i.json.testName === 'Firebase Configuration Check')?.json;\nconst listeResult = allInputs.find(i => i.json.testName === 'Liste Page Functionality Check')?.json;\nconst kanbanResult = allInputs.find(i => i.json.testName === 'Kanban Page Functionality Check')?.json;\nconst partnerResult = allInputs.find(i => i.json.testName === 'Partner Portal Functionality Check')?.json;\n\n// Calculate overall status\nconst allPassed = [\n  firebaseConfigResult?.passed,\n  listeResult?.passed,\n  kanbanResult?.passed,\n  partnerResult?.passed\n].every(p => p === true);\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testSuite: 'Firebase API & Functionality Tests',\n  overallStatus: allPassed ? '✅ ALL TESTS PASSED' : '❌ SOME TESTS FAILED',\n  \n  results: {\n    firebaseConfig: {\n      status: firebaseConfigResult?.status || 'N/A',\n      passRate: firebaseConfigResult?.passRate || 'N/A',\n      details: firebaseConfigResult || {}\n    },\n    listePage: {\n      status: listeResult?.status || 'N/A',\n      details: listeResult || {}\n    },\n    kanbanPage: {\n      status: kanbanResult?.status || 'N/A',\n      details: kanbanResult || {}\n    },\n    partnerPortal: {\n      status: partnerResult?.status || 'N/A',\n      details: partnerResult || {}\n    }\n  },\n  \n  summary: `\n📊 FIREBASE API & FUNCTIONALITY TESTS\n=====================================\nTimestamp: ${new Date().toLocaleString('de-DE')}\n\nOverall: ${allPassed ? '✅ ALL PASSED' : '❌ FAILURES DETECTED'}\n\n--- Test Results ---\n1️⃣ Firebase Config: ${firebaseConfigResult?.status || 'N/A'}\n   Pass Rate: ${firebaseConfigResult?.passRate || 'N/A'}\n\n2️⃣ Liste Page: ${listeResult?.status || 'N/A'}\n\n3️⃣ Kanban Page: ${kanbanResult?.status || 'N/A'}\n\n4️⃣ Partner Portal: ${partnerResult?.status || 'N/A'}\n`\n};\n\nconsole.log(result.summary);\n\nreturn [{ json: result }];"
      },
      "name": "Combine Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2050, 300],
      "id": "combine-results"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-status",
              "name": "testComplete",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "final-message",
              "name": "message",
              "value": "=Firebase API Tests abgeschlossen: {{ $json.overallStatus }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Final Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [2250, 300],
      "id": "final-output"
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Load Annahme Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Annahme Page": {
      "main": [
        [
          {
            "node": "Check Firebase Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Firebase Config": {
      "main": [
        [
          {
            "node": "Load Liste Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Liste Page": {
      "main": [
        [
          {
            "node": "Check Liste Features",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Liste Features": {
      "main": [
        [
          {
            "node": "Load Kanban Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Kanban Page": {
      "main": [
        [
          {
            "node": "Check Kanban Columns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Kanban Columns": {
      "main": [
        [
          {
            "node": "Load Partner Portal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Partner Portal": {
      "main": [
        [
          {
            "node": "Check Partner Features",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Partner Features": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Results": {
      "main": [
        [
          {
            "node": "Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "firebase-api-tests",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-19T10:00:00.000Z",
  "createdAt": "2025-10-19T10:00:00.000Z"
}
