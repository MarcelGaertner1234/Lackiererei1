{
  "name": "Fahrzeugannahme - Comprehensive Test Suite",
  "nodes": [
    {
      "parameters": {},
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "id": "manual-trigger"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex"
      },
      "name": "Wait for All Health Checks",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1250, 300],
      "id": "merge-health-checks"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 1: Homepage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 100],
      "id": "test-1-homepage"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/annahme.html",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 2: Annahme Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 200],
      "id": "test-2-annahme"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/liste.html",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 3: Liste Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 300],
      "id": "test-3-liste"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/kanban.html",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 4: Kanban Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 400],
      "id": "test-4-kanban"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/partner-app/index.html",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 5: Partner Portal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 500],
      "id": "test-5-partner"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/firebase-config.js",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 6: Firebase Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 100],
      "id": "test-6-firebase-config"
    },
    {
      "parameters": {
        "url": "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 7: Firebase SDK",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 200],
      "id": "test-7-firebase-sdk"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/error-handler.js",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 8: Error Handler",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 300],
      "id": "test-8-error-handler"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/utils/pdf-generator.js",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 9: PDF Generator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 400],
      "id": "test-9-pdf-generator"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/utils/signature-pad-handler.js",
        "options": {
          "timeout": 10000,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "name": "Test 10: Signature Pad",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 500],
      "id": "test-10-signature"
    },
    {
      "parameters": {
        "jsCode": "// n8n HTTP Request Response: statusCode ist direkt in json verfügbar\n// Die Items kommen von der Merge Node, die alle parallelen HTTP Requests kombiniert\nconst allItems = $input.all();\n\n// Direkt Status Codes extrahieren (n8n speichert statusCode in json)\nconst test1 = allItems[0] && allItems[0].json && allItems[0].json.statusCode ? allItems[0].json.statusCode : null;\nconst test2 = allItems[1] && allItems[1].json && allItems[1].json.statusCode ? allItems[1].json.statusCode : null;\nconst test3 = allItems[2] && allItems[2].json && allItems[2].json.statusCode ? allItems[2].json.statusCode : null;\nconst test4 = allItems[3] && allItems[3].json && allItems[3].json.statusCode ? allItems[3].json.statusCode : null;\nconst test5 = allItems[4] && allItems[4].json && allItems[4].json.statusCode ? allItems[4].json.statusCode : null;\nconst test6 = allItems[5] && allItems[5].json && allItems[5].json.statusCode ? allItems[5].json.statusCode : null;\nconst test7 = allItems[6] && allItems[6].json && allItems[6].json.statusCode ? allItems[6].json.statusCode : null;\nconst test8 = allItems[7] && allItems[7].json && allItems[7].json.statusCode ? allItems[7].json.statusCode : null;\nconst test9 = allItems[8] && allItems[8].json && allItems[8].json.statusCode ? allItems[8].json.statusCode : null;\nconst test10 = allItems[9] && allItems[9].json && allItems[9].json.statusCode ? allItems[9].json.statusCode : null;\n\n// Count successes\nconst allTests = [test1, test2, test3, test4, test5, test6, test7, test8, test9, test10];\nconst successCount = allTests.filter(function(t) { return t === 200; }).length;\nconst totalCount = allTests.length;\nconst successRate = Math.round((successCount / totalCount) * 100);\n\n// Determine overall status\nconst allPassed = allTests.every(function(t) { return t === 200; });\n\n// Create detailed result\nconst result = {\n  timestamp: new Date().toISOString(),\n  testSuite: 'Comprehensive Health Checks',\n  overallStatus: allPassed ? '✅ ALL TESTS PASSED' : '❌ SOME TESTS FAILED',\n  successRate: successRate + '% (' + successCount + '/' + totalCount + ')',\n  healthChecks: {\n    homepage: test1 === 200 ? '✅ 200' : '❌ ' + (test1 || 'FAILED'),\n    annahme: test2 === 200 ? '✅ 200' : '❌ ' + (test2 || 'FAILED'),\n    liste: test3 === 200 ? '✅ 200' : '❌ ' + (test3 || 'FAILED'),\n    kanban: test4 === 200 ? '✅ 200' : '❌ ' + (test4 || 'FAILED'),\n    partner: test5 === 200 ? '✅ 200' : '❌ ' + (test5 || 'FAILED')\n  },\n  assetChecks: {\n    firebaseConfig: test6 === 200 ? '✅ 200' : '❌ ' + (test6 || 'FAILED'),\n    firebaseSDK: test7 === 200 ? '✅ 200' : '❌ ' + (test7 || 'FAILED'),\n    errorHandler: test8 === 200 ? '✅ 200' : '❌ ' + (test8 || 'FAILED'),\n    pdfGenerator: test9 === 200 ? '✅ 200' : '❌ ' + (test9 || 'FAILED'),\n    signaturePad: test10 === 200 ? '✅ 200' : '❌ ' + (test10 || 'FAILED')\n  },\n  rawResults: {\n    test1_homepage: test1,\n    test2_annahme: test2,\n    test3_liste: test3,\n    test4_kanban: test4,\n    test5_partner: test5,\n    test6_firebaseConfig: test6,\n    test7_firebaseSDK: test7,\n    test8_errorHandler: test8,\n    test9_pdfGenerator: test9,\n    test10_signaturePad: test10\n  },\n  failedTests: []\n};\n\n// Build failedTests array manually (no chaining)\nfor (var i = 0; i < allTests.length; i++) {\n  if (allTests[i] !== 200) {\n    result.failedTests.push('Test ' + (i + 1) + ': Status ' + (allTests[i] || 'FAILED'));\n  }\n}\n\nreturn [{ json: result }];"
      },
      "name": "Analyze Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 300],
      "id": "analyze-results"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-all-passed",
              "leftValue": "={{ $json.overallStatus }}",
              "rightValue": "✅ ALL TESTS PASSED",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check If All Tests Passed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1650, 300],
      "id": "if-all-passed"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-email-subject",
              "name": "emailSubject",
              "value": "✅ Fahrzeugannahme App - All Tests Passed",
              "type": "string"
            },
            {
              "id": "success-email-body",
              "name": "emailBody",
              "value": "=Fahrzeugannahme App Test Suite - SUCCESS\n\nTimestamp: {{ $json.timestamp }}\nSuccess Rate: {{ $json.successRate }}\n\n🎉 ALL TESTS PASSED!\n\n--- Health Checks ---\nHomepage: {{ $json.healthChecks.homepage }}\nAnnahme: {{ $json.healthChecks.annahme }}\nListe: {{ $json.healthChecks.liste }}\nKanban: {{ $json.healthChecks.kanban }}\nPartner Portal: {{ $json.healthChecks.partner }}\n\n--- Asset Checks ---\nFirebase Config: {{ $json.assetChecks.firebaseConfig }}\nFirebase SDK: {{ $json.assetChecks.firebaseSDK }}\nError Handler: {{ $json.assetChecks.errorHandler }}\nPDF Generator: {{ $json.assetChecks.pdfGenerator }}\nSignature Pad: {{ $json.assetChecks.signaturePad }}\n\nDie App läuft stabil! 🚀",
              "type": "string"
            },
            {
              "id": "success-status",
              "name": "status",
              "value": "success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Format Success Email",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1850, 200],
      "id": "format-success-email"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "failure-email-subject",
              "name": "emailSubject",
              "value": "❌ Fahrzeugannahme App - Tests Failed",
              "type": "string"
            },
            {
              "id": "failure-email-body",
              "name": "emailBody",
              "value": "=Fahrzeugannahme App Test Suite - FAILURE\n\nTimestamp: {{ $json.timestamp }}\nSuccess Rate: {{ $json.successRate }}\n\n⚠️ EINIGE TESTS SIND FEHLGESCHLAGEN!\n\n--- Failed Tests ---\n{{ $json.failedTests.join('\\n') }}\n\n--- Health Checks ---\nHomepage: {{ $json.healthChecks.homepage }}\nAnnahme: {{ $json.healthChecks.annahme }}\nListe: {{ $json.healthChecks.liste }}\nKanban: {{ $json.healthChecks.kanban }}\nPartner Portal: {{ $json.healthChecks.partner }}\n\n--- Asset Checks ---\nFirebase Config: {{ $json.assetChecks.firebaseConfig }}\nFirebase SDK: {{ $json.assetChecks.firebaseSDK }}\nError Handler: {{ $json.assetChecks.errorHandler }}\nPDF Generator: {{ $json.assetChecks.pdfGenerator }}\nSignature Pad: {{ $json.assetChecks.signaturePad }}\n\nBitte prüfe die App: https://marcelgaertner1234.github.io/Lackiererei1/",
              "type": "string"
            },
            {
              "id": "failure-status",
              "name": "status",
              "value": "failure",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Format Failure Email",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1850, 400],
      "id": "format-failure-email"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition"
      },
      "name": "Merge Email Formats",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2050, 300],
      "id": "merge-emails"
    },
    {
      "parameters": {
        "jsCode": "// Create comprehensive test log\nconst timestamp = new Date().toISOString();\nconst date = new Date().toLocaleDateString('de-DE');\nconst time = new Date().toLocaleTimeString('de-DE');\n\nconst inputData = $input.first().json;\n\n// Create formatted log entry\nconst logEntry = {\n  // Metadata\n  timestamp: timestamp,\n  date: date,\n  time: time,\n  testSuite: 'Comprehensive Health Checks',\n  \n  // Summary\n  overallStatus: inputData.overallStatus,\n  successRate: inputData.successRate,\n  emailSubject: inputData.emailSubject,\n  status: inputData.status,\n  \n  // Individual Test Results (for spreadsheet)\n  test1_homepage: inputData.rawResults?.test1_homepage || 'N/A',\n  test2_annahme: inputData.rawResults?.test2_annahme || 'N/A',\n  test3_liste: inputData.rawResults?.test3_liste || 'N/A',\n  test4_kanban: inputData.rawResults?.test4_kanban || 'N/A',\n  test5_partner: inputData.rawResults?.test5_partner || 'N/A',\n  test6_firebaseConfig: inputData.rawResults?.test6_firebaseConfig || 'N/A',\n  test7_firebaseSDK: inputData.rawResults?.test7_firebaseSDK || 'N/A',\n  test8_errorHandler: inputData.rawResults?.test8_errorHandler || 'N/A',\n  test9_pdfGenerator: inputData.rawResults?.test9_pdfGenerator || 'N/A',\n  test10_signaturePad: inputData.rawResults?.test10_signaturePad || 'N/A',\n  \n  // Human-readable format for console\n  summary: `\n📊 TEST SUITE RESULTS\n=====================\nTimestamp: ${date} ${time}\nStatus: ${inputData.overallStatus}\nSuccess Rate: ${inputData.successRate}\n\n✅ HEALTH CHECKS:\n  - Homepage: ${inputData.healthChecks?.homepage || 'N/A'}\n  - Annahme: ${inputData.healthChecks?.annahme || 'N/A'}\n  - Liste: ${inputData.healthChecks?.liste || 'N/A'}\n  - Kanban: ${inputData.healthChecks?.kanban || 'N/A'}\n  - Partner: ${inputData.healthChecks?.partner || 'N/A'}\n\n📦 ASSET CHECKS:\n  - Firebase Config: ${inputData.assetChecks?.firebaseConfig || 'N/A'}\n  - Firebase SDK: ${inputData.assetChecks?.firebaseSDK || 'N/A'}\n  - Error Handler: ${inputData.assetChecks?.errorHandler || 'N/A'}\n  - PDF Generator: ${inputData.assetChecks?.pdfGenerator || 'N/A'}\n  - Signature Pad: ${inputData.assetChecks?.signaturePad || 'N/A'}\n${inputData.failedTests?.length > 0 ? `\n❌ FAILED TESTS:\n${inputData.failedTests.map(t => '  - ' + t).join('\\n')}` : ''}\n`\n};\n\nconsole.log(logEntry.summary);\n\nreturn [{ json: logEntry }];"
      },
      "name": "Create Test Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2250, 300],
      "id": "create-test-log"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-output",
              "name": "testComplete",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "final-message",
              "name": "message",
              "value": "=Test Suite abgeschlossen: {{ $json.overallStatus }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Final Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [2450, 300],
      "id": "final-output"
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Test 1: Homepage",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 2: Annahme Page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 3: Liste Page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 4: Kanban Page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 5: Partner Portal",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 6: Firebase Config",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 7: Firebase SDK",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 8: Error Handler",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 9: PDF Generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test 10: Signature Pad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 1: Homepage": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 2: Annahme Page": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 3: Liste Page": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 4: Kanban Page": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 5: Partner Portal": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 6: Firebase Config": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 7: Firebase SDK": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 8: Error Handler": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 9: PDF Generator": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test 10: Signature Pad": {
      "main": [
        [
          {
            "node": "Wait for All Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for All Health Checks": {
      "main": [
        [
          {
            "node": "Analyze Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Results": {
      "main": [
        [
          {
            "node": "Check If All Tests Passed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If All Tests Passed": {
      "main": [
        [
          {
            "node": "Format Success Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Failure Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Email": {
      "main": [
        [
          {
            "node": "Merge Email Formats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Failure Email": {
      "main": [
        [
          {
            "node": "Merge Email Formats",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Email Formats": {
      "main": [
        [
          {
            "node": "Create Test Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Test Log": {
      "main": [
        [
          {
            "node": "Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "comprehensive-test-suite",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-19T10:00:00.000Z",
  "createdAt": "2025-10-19T10:00:00.000Z"
}
