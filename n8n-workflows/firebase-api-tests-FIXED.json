{
  "name": "Fahrzeugannahme - Firebase API Tests (FIXED)",
  "nodes": [
    {
      "parameters": {},
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "id": "manual-trigger"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/annahme.html",
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "name": "Load Annahme Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 300],
      "id": "load-annahme"
    },
    {
      "parameters": {
        "jsCode": "// n8n HTTP Request speichert HTML direkt in json (nicht in json.body!)\n// Für HTML Response: $input.first().json enthält den HTML-String\nconst responseData = $input.first().json;\nconst html = typeof responseData === 'string' ? responseData : (responseData.body || '');\n\n// Check if Firebase SDK loaded\nconst hasFirebaseApp = html.includes('firebase-app');\nconst hasFirestore = html.includes('firebase-firestore') || html.includes('firestore');\nconst hasStorage = html.includes('firebase-storage') || html.includes('storage');\nconst hasFirebaseConfig = html.includes('firebase-config.js');\n\n// Check DOM elements\nconst hasKennzeichenInput = html.includes('id=\"kennzeichen\"') || html.includes('kennzeichen');\nconst hasKundennameInput = html.includes('id=\"kundenname\"') || html.includes('kundenname');\nconst hasSaveButton = html.includes('Speichern');\nconst hasPhotoInput = html.includes('photoInput') || html.includes('photo');\nconst hasSignaturePad = html.includes('signaturePad') || html.includes('signature');\n\n// Check utility scripts\nconst hasErrorHandler = html.includes('error-handler.js');\nconst hasPDFGenerator = html.includes('pdf-generator.js');\n\nconst allChecks = [\n  hasFirebaseApp, hasFirestore, hasStorage, hasFirebaseConfig,\n  hasKennzeichenInput, hasKundennameInput, hasSaveButton,\n  hasPhotoInput, hasSignaturePad, hasErrorHandler, hasPDFGenerator\n];\n\nconst totalChecks = allChecks.length;\nconst passedChecks = allChecks.filter(function(c) { return c === true; }).length;\nconst passed = passedChecks === totalChecks;\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Firebase Configuration Check',\n  firebaseSDK: {\n    firebaseApp: hasFirebaseApp ? '✅ Loaded' : '❌ Missing',\n    firestore: hasFirestore ? '✅ Loaded' : '❌ Missing',\n    storage: hasStorage ? '✅ Loaded' : '❌ Missing',\n    config: hasFirebaseConfig ? '✅ Loaded' : '❌ Missing'\n  },\n  domElements: {\n    kennzeichenInput: hasKennzeichenInput ? '✅ Present' : '❌ Missing',\n    kundennameInput: hasKundennameInput ? '✅ Present' : '❌ Missing',\n    saveButton: hasSaveButton ? '✅ Present' : '❌ Missing',\n    photoInput: hasPhotoInput ? '✅ Present' : '❌ Missing',\n    signaturePad: hasSignaturePad ? '✅ Present' : '❌ Missing'\n  },\n  utilityScripts: {\n    errorHandler: hasErrorHandler ? '✅ Loaded' : '❌ Missing',\n    pdfGenerator: hasPDFGenerator ? '✅ Loaded' : '❌ Missing'\n  },\n  passed: passed,\n  passRate: passedChecks + '/' + totalChecks + ' (' + Math.round((passedChecks/totalChecks)*100) + '%)',\n  status: passed ? '✅ ALL CHECKS PASSED' : '❌ SOME CHECKS FAILED'\n};\n\nreturn [{ json: result }];"
      },
      "name": "Check Firebase Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300],
      "id": "check-firebase-config"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/liste.html",
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "name": "Load Liste Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "id": "load-liste"
    },
    {
      "parameters": {
        "jsCode": "const responseData = $input.first().json;\nconst html = typeof responseData === 'string' ? responseData : (responseData.body || '');\n\nconst hasRealtimeListener = html.includes('onSnapshot') || html.includes('realtime');\nconst hasFilterButtons = html.includes('filter-btn') || html.includes('filterButton');\nconst hasVehicleList = html.includes('fahrzeugListe') || html.includes('vehicle-list') || html.includes('tableContainer');\nconst hasSearchInput = html.includes('search') || html.includes('suche') || html.includes('searchInput');\nconst hasPagination = html.includes('pagination') || html.includes('page');\nconst hasStatusBadges = html.includes('badge') || html.includes('status');\nconst hasExportButton = html.includes('export') || html.includes('Excel') || html.includes('CSV');\n\nconst criticalChecks = [hasFilterButtons, hasVehicleList];\nconst passed = criticalChecks.every(function(c) { return c === true; });\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Liste Page Functionality Check',\n  features: {\n    realtimeListener: hasRealtimeListener ? '✅ Present' : '⚠️ Not detected',\n    filterButtons: hasFilterButtons ? '✅ Present' : '❌ Missing',\n    vehicleList: hasVehicleList ? '✅ Present' : '❌ Missing',\n    searchInput: hasSearchInput ? '✅ Present' : '⚠️ Not detected',\n    pagination: hasPagination ? '✅ Present' : '⚠️ Not detected',\n    statusBadges: hasStatusBadges ? '✅ Present' : '⚠️ Not detected',\n    exportButton: hasExportButton ? '✅ Present' : '⚠️ Not detected'\n  },\n  passed: passed,\n  status: passed ? '✅ CRITICAL CHECKS PASSED' : '❌ CRITICAL CHECKS FAILED'\n};\n\nreturn [{ json: result }];"
      },
      "name": "Check Liste Features",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300],
      "id": "check-liste-features"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/kanban.html",
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "name": "Load Kanban Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1250, 300],
      "id": "load-kanban"
    },
    {
      "parameters": {
        "jsCode": "const responseData = $input.first().json;\nconst html = typeof responseData === 'string' ? responseData : (responseData.body || '');\n\nconst hasAngenommenColumn = html.includes('angenommen') || html.includes('Angenommen');\nconst hasInArbeitColumn = html.includes('in-arbeit') || html.includes('In Arbeit');\nconst hasFertigColumn = html.includes('fertig') || html.includes('Fertig');\nconst hasAusgeliefertColumn = html.includes('ausgeliefert') || html.includes('Ausgeliefert');\nconst hasDragDropLibrary = html.includes('draggable') || html.includes('sortable');\nconst hasCardTemplate = html.includes('card') || html.includes('fahrzeug-card');\nconst hasRealtimeUpdates = html.includes('onSnapshot') || html.includes('realtime');\n\nconst criticalChecks = [\n  hasAngenommenColumn,\n  hasInArbeitColumn,\n  hasFertigColumn,\n  hasAusgeliefertColumn,\n  hasCardTemplate\n];\n\nconst passed = criticalChecks.every(function(c) { return c === true; });\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Kanban Page Functionality Check',\n  kanbanColumns: {\n    angenommen: hasAngenommenColumn ? '✅ Present' : '❌ Missing',\n    inArbeit: hasInArbeitColumn ? '✅ Present' : '❌ Missing',\n    fertig: hasFertigColumn ? '✅ Present' : '❌ Missing',\n    ausgeliefert: hasAusgeliefertColumn ? '✅ Present' : '❌ Missing'\n  },\n  features: {\n    dragDropLibrary: hasDragDropLibrary ? '✅ Present' : '⚠️ Not detected',\n    cardTemplate: hasCardTemplate ? '✅ Present' : '❌ Missing',\n    realtimeUpdates: hasRealtimeUpdates ? '✅ Present' : '⚠️ Not detected'\n  },\n  passed: passed,\n  status: passed ? '✅ ALL COLUMNS PRESENT' : '❌ MISSING COLUMNS'\n};\n\nreturn [{ json: result }];"
      },
      "name": "Check Kanban Columns",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 300],
      "id": "check-kanban-columns"
    },
    {
      "parameters": {
        "url": "https://marcelgaertner1234.github.io/Lackiererei1/partner-app/index.html",
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "name": "Load Partner Portal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1650, 300],
      "id": "load-partner"
    },
    {
      "parameters": {
        "jsCode": "const responseData = $input.first().json;\nconst html = typeof responseData === 'string' ? responseData : (responseData.body || '');\n\nconst hasAnfrageForm = html.includes('anfrage') || html.includes('Anfrage');\nconst hasKennzeichenField = html.includes('kennzeichen');\nconst hasSchadensbeschreibung = html.includes('schadensbeschreibung') || html.includes('beschreibung');\nconst hasKVASection = html.includes('kva') || html.includes('KVA');\nconst hasKVAList = html.includes('kva-liste') || html.includes('kva-list');\nconst hasStatusTracking = html.includes('status') && html.includes('tracking');\nconst hasPhotoUpload = html.includes('photo') || html.includes('foto');\nconst hasFirebaseIntegration = html.includes('firebase-config');\n\nconst criticalChecks = [\n  hasAnfrageForm,\n  hasKennzeichenField,\n  hasKVASection,\n  hasFirebaseIntegration\n];\n\nconst passed = criticalChecks.every(function(c) { return c === true; });\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testName: 'Partner Portal Functionality Check',\n  anfrageFeatures: {\n    anfrageForm: hasAnfrageForm ? '✅ Present' : '❌ Missing',\n    kennzeichenField: hasKennzeichenField ? '✅ Present' : '❌ Missing',\n    schadensbeschreibung: hasSchadensbeschreibung ? '✅ Present' : '❌ Missing',\n    photoUpload: hasPhotoUpload ? '✅ Present' : '⚠️ Not detected'\n  },\n  kvaFeatures: {\n    kvaSection: hasKVASection ? '✅ Present' : '❌ Missing',\n    kvaList: hasKVAList ? '✅ Present' : '⚠️ Not detected',\n    statusTracking: hasStatusTracking ? '✅ Present' : '⚠️ Not detected'\n  },\n  integration: {\n    firebaseConfig: hasFirebaseIntegration ? '✅ Loaded' : '❌ Missing'\n  },\n  passed: passed,\n  status: passed ? '✅ PARTNER PORTAL OK' : '❌ CRITICAL FEATURES MISSING'\n};\n\nreturn [{ json: result }];"
      },
      "name": "Check Partner Features",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300],
      "id": "check-partner-features"
    },
    {
      "parameters": {
        "jsCode": "const allInputs = $input.all();\n\nvar firebaseConfigResult = null;\nvar listeResult = null;\nvar kanbanResult = null;\nvar partnerResult = null;\n\n// Find results by testName (ohne Optional Chaining)\nfor (var i = 0; i < allInputs.length; i++) {\n  if (allInputs[i].json && allInputs[i].json.testName) {\n    if (allInputs[i].json.testName === 'Firebase Configuration Check') {\n      firebaseConfigResult = allInputs[i].json;\n    } else if (allInputs[i].json.testName === 'Liste Page Functionality Check') {\n      listeResult = allInputs[i].json;\n    } else if (allInputs[i].json.testName === 'Kanban Page Functionality Check') {\n      kanbanResult = allInputs[i].json;\n    } else if (allInputs[i].json.testName === 'Partner Portal Functionality Check') {\n      partnerResult = allInputs[i].json;\n    }\n  }\n}\n\nconst allPassed = [\n  firebaseConfigResult && firebaseConfigResult.passed,\n  listeResult && listeResult.passed,\n  kanbanResult && kanbanResult.passed,\n  partnerResult && partnerResult.passed\n].every(function(p) { return p === true; });\n\nconst result = {\n  timestamp: new Date().toISOString(),\n  testSuite: 'Firebase API & Functionality Tests',\n  overallStatus: allPassed ? '✅ ALL TESTS PASSED' : '❌ SOME TESTS FAILED',\n  results: {\n    firebaseConfig: {\n      status: firebaseConfigResult ? firebaseConfigResult.status : 'N/A',\n      passRate: firebaseConfigResult ? firebaseConfigResult.passRate : 'N/A',\n      details: firebaseConfigResult || {}\n    },\n    listePage: {\n      status: listeResult ? listeResult.status : 'N/A',\n      details: listeResult || {}\n    },\n    kanbanPage: {\n      status: kanbanResult ? kanbanResult.status : 'N/A',\n      details: kanbanResult || {}\n    },\n    partnerPortal: {\n      status: partnerResult ? partnerResult.status : 'N/A',\n      details: partnerResult || {}\n    }\n  },\n  summary: '\\n📊 FIREBASE API & FUNCTIONALITY TESTS\\n' +\n           '=====================================\\n' +\n           'Timestamp: ' + new Date().toLocaleString('de-DE') + '\\n\\n' +\n           'Overall: ' + (allPassed ? '✅ ALL PASSED' : '❌ FAILURES DETECTED') + '\\n\\n' +\n           '--- Test Results ---\\n' +\n           '1️⃣ Firebase Config: ' + (firebaseConfigResult ? firebaseConfigResult.status : 'N/A') + '\\n' +\n           '   Pass Rate: ' + (firebaseConfigResult ? firebaseConfigResult.passRate : 'N/A') + '\\n\\n' +\n           '2️⃣ Liste Page: ' + (listeResult ? listeResult.status : 'N/A') + '\\n\\n' +\n           '3️⃣ Kanban Page: ' + (kanbanResult ? kanbanResult.status : 'N/A') + '\\n\\n' +\n           '4️⃣ Partner Portal: ' + (partnerResult ? partnerResult.status : 'N/A') + '\\n'\n};\n\nconsole.log(result.summary);\n\nreturn [{ json: result }];"
      },
      "name": "Combine Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2050, 300],
      "id": "combine-results"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-status",
              "name": "testComplete",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "final-message",
              "name": "message",
              "value": "=Firebase API Tests abgeschlossen: {{ $json.overallStatus }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Final Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [2250, 300],
      "id": "final-output"
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Load Annahme Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Annahme Page": {
      "main": [
        [
          {
            "node": "Check Firebase Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Firebase Config": {
      "main": [
        [
          {
            "node": "Load Liste Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Liste Page": {
      "main": [
        [
          {
            "node": "Check Liste Features",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Liste Features": {
      "main": [
        [
          {
            "node": "Load Kanban Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Kanban Page": {
      "main": [
        [
          {
            "node": "Check Kanban Columns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Kanban Columns": {
      "main": [
        [
          {
            "node": "Load Partner Portal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Partner Portal": {
      "main": [
        [
          {
            "node": "Check Partner Features",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Partner Features": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Results": {
      "main": [
        [
          {
            "node": "Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "firebase-api-tests-fixed",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-19T12:00:00.000Z",
  "createdAt": "2025-10-19T12:00:00.000Z"
}
