rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // HELPER FUNCTIONS
    // üÜï PHASE 2.1: Custom Claims Support mit Fallback
    // ============================================

    function isAuthenticated() {
      return request.auth != null;
    }

    // üß™ E2E Test Support: Detect Emulator Mode
    // Allows E2E tests to bypass authentication for cleanup operations
    // SECURITY: Only works in Emulator (localhost), NOT in production
    function isEmulator() {
      // Emulator-Mode detection: request.time is null in emulator context
      return request.time == null;
    }

    // üÜï Priority 1: Custom Claims, Priority 2: Firestore Fallback
    function getUserRole() {
      // Try Custom Claims first (faster, no Firestore read), else Firestore
      return (request.auth.token != null && request.auth.token.role != null)
        ? request.auth.token.role
        : get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Status bleibt Firestore-basiert (Claims haben kein 'status' field)
    function getUserStatus() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status;
    }

    function isAdmin() {
      return isAuthenticated() && (getUserRole() == 'admin' || getUserRole() == 'werkstatt' || getUserRole() == 'superadmin');
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'superadmin';
    }

    function isMitarbeiter() {
      return isAuthenticated() && getUserRole() == 'mitarbeiter';
    }

    function isPartner() {
      return isAuthenticated() && getUserRole() == 'partner';
    }

    function isKunde() {
      return isAuthenticated() && getUserRole() == 'kunde';
    }

    function isActive() {
      return getUserStatus() == 'active';
    }

    // üÜï Check ownership via Custom Claims partnerId OR uid
    function isOwner(partnerId) {
      // Priority 1: Custom Claims partnerId, Priority 2: Fallback to uid
      return isAuthenticated() &&
        ((request.auth.token != null && request.auth.token.partnerId != null)
          ? request.auth.token.partnerId == partnerId
          : request.auth.uid == partnerId);
    }

    // ============================================
    // USERS COLLECTION
    // ============================================

    match /users/{userId} {
      // Self-Service Registration (no auth required)
      // Users can create their own account with status='pending'
      allow create: if request.resource.data.status == 'pending'
                    && request.resource.data.uid == request.auth.uid;

      // SuperAdmin can create werkstatt accounts with status='active'
      allow create: if isSuperAdmin()
                    && request.resource.data.role == 'werkstatt'
                    && request.resource.data.keys().hasAll(['uid', 'email', 'name', 'werkstattId', 'role', 'status']);

      // Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Admins can read/write all users
      allow read, write: if isAdmin();

      // Mitarbeiter can read all users (but not write)
      allow read: if isMitarbeiter();

      // Users can update their own lastLogin
      allow update: if isAuthenticated()
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLogin']);
    }

    // ============================================
    // FAHRZEUGE COLLECTION (Anfragen)
    // ‚ö†Ô∏è DEPRECATED: Use fahrzeuge_mosbach, fahrzeuge_heidelberg, etc. instead
    // This rule exists ONLY for legacy data migration
    // See Multi-Tenant Collections (Line 208) for active rules
    // ============================================

    match /fahrzeuge/{requestId} {
      // Admins: Full access to all requests
      allow read, write: if isAdmin();

      // Mitarbeiter: Can read all, can update assigned requests
      allow read: if isMitarbeiter() && isActive();
      allow update: if isMitarbeiter() && isActive();
      allow create: if isMitarbeiter() && isActive();

      // Partner: Can only access their own requests
      allow read: if isPartner() && isActive() && isOwner(resource.data.partnerId);
      allow create: if isPartner() && isActive();
      allow update: if isPartner() && isActive() && isOwner(resource.data.partnerId);

      // Kunde: Read-only access to their own requests
      allow read: if isKunde() && isActive() && isOwner(resource.data.partnerId);

      // Subcollections: Fotos
      match /fotos/{photoId} {
        // Admins: Full access
        allow read, write: if isAdmin();

        // Mitarbeiter: Full access
        allow read, write: if isMitarbeiter() && isActive();

        // Partner: Can read/write their own photos
        allow read, write: if isPartner() && isActive()
                           && isOwner(get(/databases/$(database)/documents/fahrzeuge/$(requestId)).data.partnerId);

        // Kunde: Read-only access to their photos
        allow read: if isKunde() && isActive()
                    && isOwner(get(/databases/$(database)/documents/fahrzeuge/$(requestId)).data.partnerId);
      }
    }

    // ============================================
    // KUNDEN COLLECTION
    // ‚ö†Ô∏è DEPRECATED: Use kunden_mosbach, kunden_heidelberg, etc. instead
    // This rule exists ONLY for legacy data migration
    // See Multi-Tenant Collections (Line 220) for active rules
    // ============================================

    match /kunden/{kundeId} {
      // Admins: Full access
      allow read, write: if isAdmin();

      // Mitarbeiter: Full access
      allow read, write: if isMitarbeiter() && isActive();

      // Partner: Can read customers they've registered
      allow read: if isPartner() && isActive() && isOwner(resource.data.partnerId);
      allow create: if isPartner() && isActive();

      // Kunde: Can read their own data
      allow read: if isKunde() && isActive() && isOwner(resource.data.uid);
    }

    // ============================================
    // MATERIAL COLLECTION (Bestellungen)
    // ‚ö†Ô∏è DEPRECATED: Use materialRequests_mosbach, etc. instead
    // This rule exists ONLY for legacy data migration
    // See Multi-Tenant Collections (Line 240) for active rules
    // ============================================

    match /material/{materialId} {
      // Admins: Full access
      allow read, write: if isAdmin();

      // Mitarbeiter: Full access
      allow read, write: if isMitarbeiter() && isActive();

      // Partner: No access (internal only)
      allow read, write: if false;
    }

    // ============================================
    // KALENDER COLLECTION (Termine)
    // ‚ö†Ô∏è DEPRECATED: Use kalender_mosbach, kalender_heidelberg, etc. instead
    // This rule exists ONLY for legacy data migration
    // See Multi-Tenant Collections (Line 233) for active rules
    // ============================================

    match /kalender/{terminId} {
      // Admins: Full access
      allow read, write: if isAdmin();

      // Mitarbeiter: Full access
      allow read, write: if isMitarbeiter() && isActive();

      // Partner: Can read appointments related to their requests
      allow read: if isPartner() && isActive() && isOwner(resource.data.partnerId);
    }

    // ============================================
    // CHATS COLLECTION (KI Chat - Coming Soon)
    // ============================================

    match /chats/{chatId} {
      // Users can only read/write their own chats
      allow read, write: if isAuthenticated() && isActive() && request.auth.uid == resource.data.userId;

      // Admins can read all chats (for moderation)
      allow read: if isAdmin();
    }

    // ============================================
    // EMAIL_LOGS COLLECTION (Cloud Functions only)
    // ============================================

    match /email_logs/{logId} {
      // Admins can read email logs for debugging
      allow read: if isAdmin();

      // ONLY Cloud Functions can write (deny all user writes)
      allow write: if false;
    }

    // ============================================
    // AI_LOGS COLLECTION (Cloud Functions only)
    // ============================================

    match /ai_logs/{logId} {
      // Admins can read AI Agent logs for debugging
      allow read: if isAdmin();

      // ONLY Cloud Functions can write (deny all user writes)
      allow write: if false;
    }

    // ============================================
    // WHISPER_LOGS COLLECTION (Cloud Functions only)
    // ============================================

    match /whisper_logs/{logId} {
      // Admins can read Whisper transcription logs for debugging
      allow read: if isAdmin();

      // ONLY Cloud Functions can write (deny all user writes)
      allow write: if false;
    }

    // ============================================
    // GLOBAL CHAT COLLECTION (f√ºr Werkstatt-Benachrichtigungen)
    // ============================================

    match /globalChat/{messageId} {
      // Admins und Mitarbeiter k√∂nnen globale Chat-Nachrichten lesen/schreiben
      allow read, write: if (isAdmin() || isMitarbeiter()) && isActive();

      // Werkstatt-Rolle kann ebenfalls lesen/schreiben (f√ºr Multi-Tenant)
      allow read, write: if isAuthenticated() && getUserRole() == 'werkstatt' && isActive();
    }

    // ============================================
    // MULTI-TENANT COLLECTIONS (werkstatt-specific)
    // Using wildcard pattern: /{collection}_{werkstatt}/{docId}
    // ============================================

    // Fahrzeuge Collections: fahrzeuge_mosbach, fahrzeuge_heidelberg, etc.
    match /{fahrzeugeCollection}/{vehicleId} {
      allow read, write: if fahrzeugeCollection.matches('fahrzeuge_.*')
                         && (isEmulator() || isAdmin() || (isMitarbeiter() && isActive()));

      // Subcollections: Fotos
      match /fotos/{photoId} {
        allow read, write: if fahrzeugeCollection.matches('fahrzeuge_.*')
                           && (isEmulator() || isAdmin() || (isMitarbeiter() && isActive()));
      }
    }

    // Kunden Collections: kunden_mosbach, kunden_heidelberg, etc.
    match /{kundenCollection}/{kundeId} {
      allow read, write: if kundenCollection.matches('kunden_.*')
                         && (isEmulator() || isAdmin() || (isMitarbeiter() && isActive()));
    }

    // Mitarbeiter Collections: mitarbeiter_mosbach, mitarbeiter_heidelberg, etc.
    match /{mitarbeiterCollection}/{mitarbeiterId} {
      allow read, write: if mitarbeiterCollection.matches('mitarbeiter_.*') && isAdmin();
      allow read: if mitarbeiterCollection.matches('mitarbeiter_.*') && isMitarbeiter() && isActive();
      allow create, delete: if mitarbeiterCollection.matches('mitarbeiter_.*') && isAdmin();
    }

    // Kalender Collections: kalender_mosbach, kalender_heidelberg, etc.
    match /{kalenderCollection}/{terminId} {
      allow read, write: if kalenderCollection.matches('kalender_.*')
                         && (isAdmin() || (isMitarbeiter() && isActive()));
      allow read: if kalenderCollection.matches('kalender_.*') && isPartner() && isActive() && isOwner(resource.data.partnerId);
    }

    // Material Requests Collections: materialRequests_mosbach, etc.
    match /{materialCollection}/{requestId} {
      allow read, write: if materialCollection.matches('materialRequests_.*')
                         && (isAdmin() || (isMitarbeiter() && isActive()));
    }

    // Einstellungen Collections: einstellungen_mosbach, etc.
    match /{einstellungenCollection}/{docId} {
      allow read, write: if einstellungenCollection.matches('einstellungen_.*') && isAdmin();
      allow read: if einstellungenCollection.matches('einstellungen_.*') && isMitarbeiter() && isActive();
    }

    // ============================================
    // CHAT NOTIFICATIONS (Global + Multi-Tenant)
    // üÜï PHASE 2.3.3: Chat Notification Rules
    // ============================================

    // Global Chat Notifications
    match /chatNotifications/{docId} {
      allow read, write: if isAdmin();
      allow read: if isMitarbeiter() && isActive();
    }

    // Werkstatt-specific Chat Notifications: chatNotifications_mosbach, etc.
    match /{chatCollection}/{docId} {
      allow read, write: if chatCollection.matches('chatNotifications_.*') && isAdmin();
      allow read: if chatCollection.matches('chatNotifications_.*') && isMitarbeiter() && isActive();
    }

    // ============================================
    // PARTNER ANFRAGEN (global collection - DEPRECATED)
    // ‚ö†Ô∏è Kept for backward compatibility - use partnerAnfragen_{werkstatt} instead
    // ============================================

    match /partnerAnfragen/{anfrageId} {
      // Admins: Full access
      allow read, write: if isAdmin();

      // Mitarbeiter: Full access
      allow read, write: if isMitarbeiter() && isActive();

      // Partners: Can create and read their own
      allow create: if isPartner() && isActive();
      allow read: if isPartner() && isActive() && isOwner(resource.data.partnerId);

      // Subcollection: Chat Messages
      match /chat/{messageId} {
        // Admins: Full access
        allow read, write: if isAdmin();

        // Mitarbeiter: Full access (read + write)
        allow read, write: if isMitarbeiter() && isActive();

        // Partner: Can read/write messages in their own anfragen
        allow read, write: if isPartner() && isActive()
                           && isOwner(get(/databases/$(database)/documents/partnerAnfragen/$(anfrageId)).data.partnerId);

        // Kunde: Read-only access to messages in their anfragen
        allow read: if isKunde() && isActive()
                    && isOwner(get(/databases/$(database)/documents/partnerAnfragen/$(anfrageId)).data.partnerId);
      }
    }

    // ============================================
    // PARTNER ANFRAGEN MULTI-TENANT (werkstatt-specific collections) üÜï
    // Using wildcard pattern: partnerAnfragen_mosbach, partnerAnfragen_heilbronn, etc.
    // ============================================

    match /{anfrageCollection}/{anfrageId} {
      // Admins: Full access to all werkst√§tten anfragen
      allow read, write: if anfrageCollection.matches('partnerAnfragen_.*')
                         && (isEmulator() || isAdmin());

      // Mitarbeiter: Full access to werkstatt-specific anfragen
      allow read, write: if anfrageCollection.matches('partnerAnfragen_.*')
                         && (isEmulator() || (isMitarbeiter() && isActive()));

      // Partners: Can create and read their own anfragen
      allow create: if anfrageCollection.matches('partnerAnfragen_.*')
                    && isPartner() && isActive();

      allow read: if anfrageCollection.matches('partnerAnfragen_.*')
                  && isPartner() && isActive()
                  && isOwner(resource.data.partnerId);

      // Subcollection: Chat Messages
      match /chat/{messageId} {
        // Admins: Full access
        allow read, write: if anfrageCollection.matches('partnerAnfragen_.*') && isAdmin();

        // Mitarbeiter: Full access
        allow read, write: if anfrageCollection.matches('partnerAnfragen_.*')
                           && isMitarbeiter() && isActive();

        // Partner: Can read/write messages in their own anfragen
        allow read, write: if anfrageCollection.matches('partnerAnfragen_.*')
                           && isPartner() && isActive()
                           && isOwner(get(/databases/$(database)/documents/$(anfrageCollection)/$(anfrageId)).data.partnerId);
      }
    }

    // ============================================
    // MITARBEITER NOTIFICATIONS MULTI-TENANT (werkstatt-specific notifications)
    // Using wildcard pattern: mitarbeiterNotifications_mosbach, etc.
    // ============================================

    match /{notificationsCollection}/{notificationId} {
      // Admins: Full access to all werkst√§tten notifications
      allow read, write: if notificationsCollection.matches('mitarbeiterNotifications_.*') && isAdmin();

      // Mitarbeiter: Can read and update their own notifications
      // Read: All notifications for this employee
      // Update: Mark as read, archive, etc.
      allow read: if notificationsCollection.matches('mitarbeiterNotifications_.*')
                  && isMitarbeiter() && isActive()
                  && resource.data.mitarbeiterId == request.auth.uid;

      allow update: if notificationsCollection.matches('mitarbeiterNotifications_.*')
                    && isMitarbeiter() && isActive()
                    && resource.data.mitarbeiterId == request.auth.uid
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'readAt']);

      // Cloud Functions: Can create new notifications (no auth context)
      // IMPORTANT: Cloud Functions run without authentication context
      allow create: if notificationsCollection.matches('mitarbeiterNotifications_.*'); // Cloud Functions will validate

      // Delete: Only admins (cleanup old notifications)
      allow delete: if notificationsCollection.matches('mitarbeiterNotifications_.*') && isAdmin();
    }


    // ============================================
    // COLLECTION GROUP: chat (ALL chat subcollections)
    // Needed for global-chat-notifications.js db.collectionGroup('chat')
    // ============================================

    match /{path=**}/chat/{messageId} {
      // Admins: Full access to all chat messages across all collections
      allow read, write: if isAdmin();

      // Mitarbeiter: Full access (read + write) to all chat messages
      allow read, write: if isMitarbeiter() && isActive();

      // Partner: Can read/write messages in their own anfragen
      // NOTE: This relies on subcollection rules in partnerAnfragen for ownership check
      allow read, write: if isPartner() && isActive();

      // Kunden: Can read/write messages in anfragen where they are the customer
      // NOTE: This relies on subcollection rules for ownership check
      allow read, write: if isKunde() && isActive();
    }

    // ============================================
    // CHAT SUBCOLLECTIONS (CollectionGroup Query)
    // ============================================

    // Chat messages in Partner-Anfragen (partnerAnfragen_*/*/chat/*)
    match /{path=**}/chat/{messageId} {
      // Admins & Werkstatt: Can read all chat messages
      allow read: if isAdmin();

      // Mitarbeiter: Can read all chat messages
      allow read: if isMitarbeiter();

      // Partners: Can read/write messages in their own anfragen
      // Note: Ownership check via parent partnerAnfragen document
      allow read, write: if isPartner() && isActive();

      // Kunden: Can read/write messages in anfragen where they are the customer
      allow read, write: if isKunde() && isActive();
    }

    // ============================================
    // DEFAULT DENY
    // ============================================

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
